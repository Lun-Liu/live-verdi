Recap the problem and motivation. This part should be brief, since we've
already heard about this.
=> Problem:
   Verify liveness properties of distributed systems. Our goal is to solve this
   within the Verdi framework which already provides a nice infrastructure for
   building distributed systems which are 'safe' by construction.
=> Motivation:
   Liveness properties are just as important as safety properties and it's
   critical that real systems do not get stuck and guarantee some form of
   "progress". To our knowledge, there are very few tools which try to help
   verify liveness of systems.
=> More details in proposal.pdf


Briefly describe your overall approach.  A small concrete example snippet or
two would be very helpful.

As proposed in the porposal, our goal is to demonstrate verification of
liveness properties of distributed systems using Verdi, by extending the
framework as needed. The general apporach is to implement the system in coq as
Gallina functions, formalize and prove properties about it, then apply the
transformer and prove the transformer can preserve the properties.

As a concrete example, we can have a simple banking system which has a server
and an agent (the ATM machine). Agent can send requests to server and server
will handle the incoming request, process the request and respond to agent. We
can model this system as a distributed system that has two nodes. Nodes talk to
each other by sending messages. They can also handle IO to/ from the system.
(In this example only agent does the real IO). 

Network semantics decide how network and packets behave. For the simple network
semantic, packets can be reordered but will never be lost or duplicated.
Network semantics also define what kind of the internal information is visible.
For example, if someone wants to reason about liveness properties, he/ she
might as well use the Labeled network semantics which export traces of lables
so it's easy to reason about transition of states.

Safety properties of this system under the simple network semantic would be
something like "an account can never have value less than minimum value", and
we can formalize it as

    Theorem min_value_invariant :
        forall net tr,
              step_async_star step_async_init net tr ->
              (min_value_invariant_network net /\ min_value_invariant_trace tr).

      Lemma true_in_reachable_min_value :
          true_in_reachable step_async step_async_init
          (fun net => min_value_invariant_network net).

An example liveness property of this system is "if agent sends a request, it
will eventually receive a response", we can formalize it as

  Theorem Waiting_eventually_Processed :
      forall s,
            initialized_eventseq s ->
            weak_fairness lb_step_async label_silent s ->
            now (occurred Waiting) s ->
            eventually (now (occurred Processed)) s.

We can prove those systems under the simple network semantic. Then we can apply
transformers to lift this system to a network semantics with faulting senarios.

Transformers are basically wrappers that can be applied on base systems. Every
transformer can handle specific faulting scenario of network in a standard way.
For example, a sequence number transformer is to handle duplicate network
packets. Whenever a packet is received, the transformer will first deal with
the sequence numbering part then the handler of the base system will be called.
Therefore, application level properties and transformer guarantee proofs can be
orthogonal, and the programmers of distributed systems only have to prove the
base system properties.

In the bank example, the safety transform lemma can be formalized as

  Theorem true_in_reachable_transform :
      forall P,
            true_in_reachable step_async step_async_init P ->
            true_in_reachable step_dup step_async_init (fun net => P (revertNetwork net)).

The liveness transform lemma can be formalized as 

  Definition eventually_in_lb step init  lb_step  P Q:=
      forall s,
            event_step_star step init (hd s) ->
            lb_step_execution lb_step s ->
            weak_fairness lb_step_async label_silent s ->
            P s ->
            eventually Q s.

  Lemma eventually_lb_transform :
      forall P Q,
            eventually_in_lb step_async step_async_init lb_step_async P Q ->
            eventually_in_lb step_dup step_async_init lb_step_dup
            (fun s => P (revertSeq s)) (fun s => Q (revertSeq s)).

 Then one can just use these lemmas to prove preserved properties of the lifted system.

Results. Describe what you have achieved.  What remains to be done to make this
a full-fledged research result?
=> Results:
   + We identify richer types (for infinite traces) that base systems and
     transformers need to support to be able to reason about liveness.
   + Following the framework for safety, we propose basic liveness lemmas that
     transformers need to provide to simplify liveness proofs of the transformed
     systems (also assuming proofs of liveness theorems for base systems).
   + We show a concrete proof architecture for a distributed banking system
     with the SeqNum transformer (which handles duplicate packets in network)
     applied to it.
=> To-Dos:
   + We `Admitted` a couple of intermediate lemmas for proving liveness of the
     base system.
   + Although Verdi has LabeledNet which provides some types for reasoning
     about liveness, it's incomplete -- for example, it's the semantics of a
     network which allows duplicate packets.
   + None of the existing transformers have support for reasoning about
     infinite traces -- requires significant amount of work to update types and
     validate all existing proofs.
   + Since the basic network semantics and type-support is missing, we also
     `Admitted` the proof of liveness for the transformed
     system, but we provide the complete proof architecture.
=> Our (semi-beautiful) final presentation is available at:
   https://docs.google.com/presentation/d/1Gva9LcFWhOhn__WtnmTYmezP-PEz6qz9IAAC9RGEi-o


Lessons Learned. Reflect on the work you did, so you and I can learn from it.
How did your approach differ from what you originally proposed, and why?  What
was more (or less) challenging than you expected?  What would you do
differently next time?  What do you now see as the strengths/weaknesses of a
tool like Coq, and what does that imply about possible research directions to
pursue?

Our biggest takeaway from this project is that Coq has a really steep learning
curve and it's really hard to master coq well enough to be able to verify real
world applications. To prove simple math theorems or lammas might not be to
hard to begin with, but if someone really wants to use it to prove real-world
applications he/ she will have to figure out the proper tactics (and sometimes
to even write some of their own) to be efficient in proving in coq. 

There really isn't much the programmers can do differently to deal with this
problem, but to get their hands dirty and try to learn how to use different
approaches and tactics. On the other hand, for tools like coq, it might be
better if they can provide higher level abstractions to programmmers and allow
them to do proofs in a higher level, without getting lost in sea of details.


Code.  Please submit all of your Coq code along with some brief documentation
so I can relatively easily play with it and understand what's going on.
=> https://github.com/pakkaliu/live-verdi

----
05/22/17

Lun Liu
Saswat Padhi
